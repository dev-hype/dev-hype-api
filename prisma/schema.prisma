// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==========================
// ENUMS

enum WeekDay {
  Mon
  Tue
  Wed
  Thu
  Fri
  Sat
  Sun
}

// ==========================
// MODELS

model User {
  id String @id @default(uuid())

  email     String   @unique
  password  String?
  githubId  String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified  Boolean  @default(false)

  profile Profile?

  Goal Goal[]
  @@map("users")
}

model Profile {
  id Int @id @default(autoincrement())

  firstName String
  lastName  String
  bio       String?
  avatar    String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  countryCode String?
  country     Country? @relation(fields: [countryCode], references: [key], onDelete: Restrict)

  @@map("profiles")
}

model Country {
  id Int @id @default(autoincrement())

  name String @unique
  key  String @unique

  profiles Profile[]

  @@map("countries")
}

model Field {
  id Int @id @default(autoincrement())

  name String @unique

  specializations Specialization[]

  @@map("fields")
}

model Specialization {
  id Int @id @default(autoincrement())

  name String @unique

  fieldId Int
  field   Field @relation(fields: [fieldId], references: [id], onDelete: Restrict)

  topics Topic[]

  @@map("specializations")
}

model Topic {
  id Int @id @default(autoincrement())

  name String

  specializationId Int
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Restrict)

  goals Goal[]

  @@unique([name, specializationId])
  @@map("topics")
}

model Resource {
  id Int @id @default(autoincrement())

  name   String  @unique
  url    String
  isFree Boolean

  typeId Int
  type   ResourceType @relation(fields: [typeId], references: [id], onDelete: Restrict)

  milestones Milestone[]

  @@map("resources")
}

model ResourceType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  resources Resource[]

  @@map("resourceTypes")
}

model Goal {
  id Int @id @default(autoincrement())

  name             String
  startDate        DateTime?
  estimatedEndDate DateTime?
  actualEndDate    DateTime?
  isActive         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt


  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Restrict)

  milestones Milestone[]
  projects   Project[]

  @@map("goals")
}

model Milestone {
  id Int @id @default(autoincrement())

  name             String
  startDate        DateTime
  durationInHours  Int
  estimatedEndDate DateTime
  actualEndDate    DateTime?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  goalId     Int
  goal       Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Restrict)

  milestoneSchedules MilestoneSchedule[]
  milestonesNotes    MilestoneNote[]

  @@map("milestones")
}

model MilestoneSchedule {
  id Int @id @default(autoincrement())

  weekDay         WeekDay
  durationInHours Int

  milestoneId Int
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("milestoneSchedules")
}

model MilestoneNote {
  id Int @id @default(autoincrement())

  title     String
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  milestoneId Int
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)

  @@map("milestoneNotes")
}

model Project {
  id Int @id @default(autoincrement())

  name        String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  goalId Int
  goal   Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@map("projects")
}
