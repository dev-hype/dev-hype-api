# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateMilestoneScheduleDto {
  durationInHours: Int!
  milestoneId: Int
  weekDay: WeekDay!
}

input CreateResourceDto {
  isFree: Boolean!
  name: String!
  typeId: Int!
  url: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GqlCountry {
  key: String!
  name: String!
}

type GqlField {
  id: Int!
  name: String!
  specializations: [GqlSpecialization!]!
}

type GqlGoal {
  actualEndDate: DateTime
  createdAt: DateTime!
  estimatedEndDate: DateTime
  id: Int!
  isActive: Boolean!
  milestones: [GqlMilestone!]!
  name: String!
  startDate: DateTime
  topic: GqlTopic!
  topicId: Int!
  updatedAt: DateTime!
  userId: String!
}

type GqlGoalsResponse {
  count: Int!
  limit: Int!
  list: [GqlGoal!]!
  page: Int!
}

type GqlMilestone {
  actualEndDate: DateTime
  createdAt: DateTime!
  durationInHours: Int!
  estimatedEndDate: DateTime!
  goalId: Int!
  id: Int!
  isActive: Boolean!
  milestoneSchedules: [GqlMilestoneSchedule!]!
  name: String!
  resource: GqlResource!
  resourceId: Int!
  startDate: DateTime!
  updatedAt: DateTime!
}

type GqlMilestoneSchedule {
  durationInHours: Int!
  id: Int!
  weekDay: WeekDay!
}

type GqlProfile {
  avatar: String
  bio: String
  country: GqlCountry!
  countryCode: String!
  firstName: String!
  id: String!
  lastName: String!
  timezoneName: String!
  userId: String!
}

type GqlResource {
  id: Int!
  isFree: Boolean!
  name: String!
  type: GqlResourceType!
  typeId: Int!
  url: String!
}

type GqlResourceType {
  id: Int!
  name: String!
}

type GqlSpecialization {
  fieldId: Int!
  id: Int!
  name: String!
}

type GqlTimezone {
  id: Int!
  name: String!
  offset: Float!
}

type GqlTopic {
  id: Int!
  name: String!
  specialization: GqlSpecialization!
  specializationId: Int!
}

type GqlUser {
  email: String!
  id: String!
  profile: GqlProfile
}

type Mutation {
  createGoal(name: String!, specializationId: Int!, topicName: String!): GqlGoal!
  createMilestone(estimatedEndDate: String!, goalId: Int!, name: String!, resource: CreateResourceDto!, schedules: [CreateMilestoneScheduleDto!]!, startDate: String!): GqlMilestone!
  createProfile(avatar: String, bio: String, countryCode: String!, firstName: String!, lastName: String!, timezoneName: String): GqlProfile!
  deleteGoal(id: Int!): GqlGoal!
  deleteMilestone(id: Int!): GqlMilestone!
  editProfile(avatar: String, bio: String, countryCode: String, firstName: String, lastName: String, timezoneName: String): GqlProfile!
  login(email: String!, password: String!): String!
  sendverificationEmail(email: String!): String!
  signup(email: String!, password: String!): String!
  updateGoal(id: Int!, name: String): GqlGoal!
  updateMilestone(estimatedEndDate: DateTime, id: Int!, name: String, resource: CreateResourceDto, schedules: [CreateMilestoneScheduleDto!], startDate: DateTime): GqlMilestone!
  verifyEmail(token: String!): String!
}

type Query {
  countries: [GqlCountry!]!
  fields: [GqlField!]!
  goal(id: Int!): GqlGoal
  goals(limit: Int, page: Int, topicId: Int, userId: String): GqlGoalsResponse!
  me: GqlUser!
  milestone(id: Int!): GqlMilestone
  profile(userId: String!): GqlProfile
  resourceTypes: [GqlResourceType!]!
  s3PresignedUrl(filename: String!): String!
  timezones: [GqlTimezone!]!
  topics(search: String, specializationId: Int): [GqlTopic!]!
}

enum WeekDay {
  Fri
  Mon
  Sat
  Sun
  Thu
  Tue
  Wed
}